{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# WGAN-GP with DCGAN layers\n",
    "Code is mainly based upon the DCGAN implementation in the TensorFlow tutorials"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "_uuid": "36af9c2edba178f04e989ca2a5935878caf7b0c4",
    "colab": {},
    "colab_type": "code",
    "id": "YfIk2es3hJEd"
   },
   "outputs": [],
   "source": [
    "from __future__ import absolute_import, division, print_function\n",
    "\n",
    "import tensorflow as tf\n",
    "#import memory_saving_gradients\n",
    "# monkey patch tf.gradients to point to our custom version, with automatic checkpoint selection\n",
    "#tf.__dict__[\"gradients\"] = memory_saving_gradients.gradients_memory\n",
    "import librosa\n",
    "import os\n",
    "import functools\n",
    "import subprocess\n",
    "import time\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import PIL\n",
    "#import imageio\n",
    "import simpleaudio as sa\n",
    "import math\n",
    "import gc\n",
    "from IPython import display\n",
    "import time\n",
    "import scipy.io.wavfile as wavfile\n",
    "from IPython.display import clear_output, Image, display, HTML\n",
    "from tensorflow.layers import dense, flatten\n",
    "from tensorflow.nn import relu, leaky_relu\n",
    "from tensorflow import tanh\n",
    "from tensorflow.image import resize_images, ResizeMethod\n",
    "\n",
    "conv2d_transpose = functools.partial(tf.layers.conv2d_transpose, padding='same', data_format='channels_first')\n",
    "conv2d = functools.partial(tf.layers.conv2d, padding='same', data_format='channels_first')\n",
    "batch_norm = functools.partial(tf.layers.batch_normalization, axis=1)\n",
    "layer_norm = lambda x: tf.transpose(tf.contrib.layers.layer_norm(tf.transpose(x, [0, 2, 3, 1])), [0, 3, 1, 2])\n",
    "pool = functools.partial(tf.nn.pool, window_shape=(2, 2), pooling_type='AVG', padding='SAME', data_format='NCHW')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "config = tf.ConfigProto()\n",
    "config.gpu_options.allow_growth = True\n",
    "sess = tf.Session(config=config)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def playAudio(audio, sr):\n",
    "    audio = audio.astype(np.int16)\n",
    "    play_obj = sa.play_buffer(audio, 1, 2, sr)\n",
    "    play_obj.wait_done()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "_uuid": "cbe0b356b41cbdeb6751dfde003e8590cb68586b",
    "colab": {},
    "colab_type": "code",
    "id": "NS2GWywBbAWo"
   },
   "outputs": [],
   "source": [
    "# Number for large nsynth-train dataset\n",
    "TOTAL_NUM = 102165\n",
    "# Number for small nsynth-test dataset\n",
    "# TOTAL_NUM = 1689\n",
    "BUFFER_SIZE = 2048\n",
    "BATCH_SIZE = 45\n",
    "PREFETCH_BUFFER_SIZE = BATCH_SIZE\n",
    "# EPOCHS = 150\n",
    "LAMBDA = 10\n",
    "ALPHA = 0.0002\n",
    "BETA1 = 0.5\n",
    "BETA2 = 0.999\n",
    "CRITIC_UPDATES_PER_GEN_UPDATE = 5\n",
    "noise_dim = 100\n",
    "num_examples_to_generate = 16\n",
    "padded_spec_dim = (2, 512, 256)\n",
    "spec_dim = (2, 512, 251)\n",
    "# keeping the random vector constant for generation (prediction) so\n",
    "# it will be easier to see the improvement of the gan.\n",
    "random_vector_for_generation = tf.Variable(tf.random_normal([num_examples_to_generate,\n",
    "                                                 noise_dim]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Make a dataset using TensorFlow's input pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reading spectrograms from TFRecord file, making dataset\n",
    "read_features = {\n",
    "    'note': tf.FixedLenFeature([], dtype=tf.int64),\n",
    "    'note_str': tf.FixedLenFeature([], dtype=tf.string),\n",
    "    'instrument': tf.FixedLenFeature([], dtype=tf.int64),\n",
    "    'instrument_str': tf.FixedLenFeature([], dtype=tf.string),\n",
    "    'pitch': tf.FixedLenFeature([], dtype=tf.int64),\n",
    "    'velocity': tf.FixedLenFeature([], dtype=tf.int64),\n",
    "    'sample_rate': tf.FixedLenFeature([], dtype=tf.int64),\n",
    "    'spectrogram': tf.FixedLenFeature([np.prod(padded_spec_dim)], dtype=float),\n",
    "    'instrument_family': tf.FixedLenFeature([], dtype=tf.int64),\n",
    "    'instrument_family_str': tf.FixedLenFeature([], dtype=tf.string),\n",
    "    'instrument_source': tf.FixedLenFeature([], dtype=tf.int64),\n",
    "    'instrument_source_str': tf.FixedLenFeature([], dtype=tf.string)\n",
    "}\n",
    "\n",
    "def _map(raw_data):\n",
    "    return tf.reshape(tf.parse_single_example(serialized=raw_data, features=read_features)['spectrogram'], padded_spec_dim)[:, :, 0:spec_dim[2]]\n",
    "\n",
    "specs = tf.data.TFRecordDataset(\"spectrograms.tfrecord\")\n",
    "specs = specs.apply(tf.data.experimental.shuffle_and_repeat(buffer_size=BUFFER_SIZE))\n",
    "specs = specs.map(map_func=_map, num_parallel_calls=-1)\n",
    "specs = specs.batch(batch_size=BATCH_SIZE)\n",
    "specs = specs.prefetch(buffer_size=PREFETCH_BUFFER_SIZE)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Defining models and training\n",
    "`buildgraph()` was largely based upon Zardinality's WGAN implementation and was extensively modified using the code from the paper introducing WGAN-GP"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "_uuid": "16478afa6311040cd8132a2c1980652a656618e6",
    "colab": {},
    "colab_type": "code",
    "id": "RmdVsmvhPxyy"
   },
   "outputs": [],
   "source": [
    "def generate_images(epoch=None, source='fake', save=True):\n",
    "    # make sure the training parameter is set to False because we\n",
    "    # don't want to train the batchnorm layer when doing inference.\n",
    "    assert not(epoch is None) or not(save)\n",
    "    \n",
    "    if(source=='fake'):\n",
    "        disp_images = sess.run(generated)\n",
    "    elif(source=='real'):\n",
    "        disp_images = sess.run(images)\n",
    "    else:\n",
    "        raise ValueError\n",
    "    fig = plt.figure(figsize=(4,4))\n",
    "    \n",
    "    for i in range(16):\n",
    "        plt.subplot(4, 4, i+1)\n",
    "        plt.imshow(disp_images[i, 0, :, :] * 127.5, cmap=\"magma\", origin=\"lower\", aspect=\"auto\")\n",
    "        plt.axis('off')\n",
    "    if(save):\n",
    "        plt.savefig('images/image_at_epoch_{:.2f}.png'.format(epoch))\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def residBlockUpscale(x, num_filters, filter_size=4, strides=(2, 2), \n",
    "                      num_filters_intermed=None, training=True):\n",
    "    if(num_filters_intermed is None):\n",
    "        num_filters_intermed = num_filters\n",
    "    x_orig = conv2d_transpose(x, num_filters, 1, strides)\n",
    "    x = batch_norm(x, training=training)\n",
    "    x = relu(x)\n",
    "    x = conv2d_transpose(x, num_filters_intermed, filter_size, strides)\n",
    "    x = batch_norm(x, training=training)\n",
    "    x = relu(x)\n",
    "    x = conv2d(x, num_filters, filter_size, 1)\n",
    "    x = x_orig + x\n",
    "    return x\n",
    "\n",
    "def residBlockDownscale(x, num_filters, filter_size=4, strides=(2, 2), \n",
    "                        num_filters_intermed=None, training=True):\n",
    "    if(num_filters_intermed is None):\n",
    "        num_filters_intermed = num_filters\n",
    "    x_orig = pool(x, window_shape=strides)\n",
    "    x_orig = conv2d(x_orig, num_filters, 1, 1)\n",
    "    x = layer_norm(x)\n",
    "    x = relu(x)\n",
    "    x = conv2d(x, num_filters_intermed, filter_size, 1)\n",
    "    x = layer_norm(x)\n",
    "    x = relu(x)\n",
    "    x = conv2d(x, num_filters_intermed, filter_size, 1)\n",
    "    x = pool(x)\n",
    "    x = x_orig + x\n",
    "    return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def generator(x, training=True):\n",
    "    # Input x is noise vector\n",
    "    with tf.variable_scope('Generator', reuse=tf.AUTO_REUSE):\n",
    "        # x_orig = tf.transpose(tf.image.resize_bicubic(tf.transpose(x, [0, 2, 3, 1]), 512*256), [0, 3, 1, 2])\n",
    "        x = dense(x, 32*32*16)\n",
    "        x = tf.reshape(x, shape = (-1, 32, 32, 16))\n",
    "        # Shape: 32x16\n",
    "        x = residBlockUpscale(x, 32, training=training)\n",
    "        # Shape: 64x32\n",
    "        x = residBlockUpscale(x, 16, training=training)\n",
    "        # Shape: 128x64\n",
    "        x = residBlockUpscale(x, 8, training=training)\n",
    "        # Shape: 256x128\n",
    "        x = residBlockUpscale(x, 2, training=training)\n",
    "        # Shape: 512x256\n",
    "        # x = x_orig + x\n",
    "        x = batch_norm(x, training=training)\n",
    "        x = relu(x)\n",
    "        x = conv2d(x, 2, 4, 1)\n",
    "        x = tanh(x)\n",
    "        x = x[:, :, :, 0:251]\n",
    "        return x\n",
    "    \n",
    "def critic(x, training=True):\n",
    "    with tf.variable_scope('Critic', reuse=tf.AUTO_REUSE):\n",
    "        x = conv2d(x, 2, 4, 1)\n",
    "        x = residBlockDownscale(x, 2, training=training)\n",
    "        x = residBlockDownscale(x, 2, training=training)\n",
    "        x = residBlockDownscale(x, 2, training=training)\n",
    "        x = residBlockDownscale(x, 2, strides=(1, 1), training=training)\n",
    "        x = flatten(x)\n",
    "        x = dense(x, 1)\n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def buildgraph():\n",
    "    # Epoch logging\n",
    "    epochs = tf.Variable(0.0, trainable=True, use_resource=True, dtype=tf.float64)\n",
    "    increment = tf.placeholder(tf.float64)\n",
    "    ranEpoch = tf.assign(epochs, tf.cast(tf.round((epochs + increment)*tf.cast(tf.pow(10, tf.cast(np.floor(np.log10(TOTAL_NUM))+2, tf.int32)), tf.float64))/tf.cast(tf.pow(10, tf.cast(np.floor(np.log10(TOTAL_NUM))+2, tf.int32)), tf.float64), tf.float64))\n",
    "    getEpoch = epochs\n",
    "    \n",
    "    # Data input\n",
    "    iterator = specs.make_one_shot_iterator()\n",
    "    real_images = iterator.get_next()\n",
    "    \n",
    "    # Running models\n",
    "    noise = tf.random_normal([BATCH_SIZE, noise_dim])\n",
    "    fake_images = generator(noise)\n",
    "    critic_real = critic(real_images)\n",
    "    critic_fake = critic(fake_images)\n",
    "    \n",
    "    # Naive costs\n",
    "    gen_cost = -tf.reduce_mean(critic_fake)\n",
    "    critic_cost = tf.reduce_mean(critic_fake)-tf.reduce_mean(critic_real)\n",
    "    \n",
    "    # Gradient penalty\n",
    "    alpha = tf.random_uniform(shape=[BATCH_SIZE, spec_dim[0], spec_dim[1], spec_dim[2]], minval=0., maxval=1.)\n",
    "    differences = fake_images-real_images\n",
    "    interpolates = real_images+(alpha*differences)\n",
    "    gradients = tf.gradients(critic(interpolates), [interpolates])[0]\n",
    "    slopes = tf.sqrt(tf.reduce_sum(tf.square(gradients), reduction_indices=[1]))\n",
    "    gradient_penalty = tf.reduce_mean((slopes-1.)**2)\n",
    "    critic_cost += LAMBDA*gradient_penalty\n",
    "    \n",
    "    with tf.control_dependencies(tf.get_collection(tf.GraphKeys.UPDATE_OPS)):\n",
    "        gen_opt = tf.train.AdamOptimizer(ALPHA, BETA1, BETA2).minimize(gen_cost,var_list=tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope='Generator'))\n",
    "        critic_opt = tf.train.AdamOptimizer(ALPHA, BETA1, BETA2).minimize(critic_cost,var_list=tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope='Critic'))\n",
    "    \n",
    "    test_images = generator(random_vector_for_generation, training=False)\n",
    "\n",
    "    return generator, gen_opt, critic_opt, real_images, test_images, ranEpoch, getEpoch, increment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "_uuid": "ac0e304af171a8d292728d743ae39e464da065cf",
    "colab": {},
    "colab_type": "code",
    "id": "2M7LmLtGEMQJ"
   },
   "outputs": [],
   "source": [
    "def train(batch, epochs, noise_dim, gen_opt, critic_opt, images):  \n",
    "    for epoch in range(epochs):\n",
    "        start = time.time()\n",
    "        runOneEpoch(batch, noise_dim, gen_opt, critic_opt, images)\n",
    "        print ('Time taken for epoch {} is {} sec'.format(epoch + 1,\n",
    "                                                          time.time()-start))\n",
    "  # generating after the final epoch\n",
    "    display.clear_output(wait=True)\n",
    "    generate_images(generator,\n",
    "                           -1,\n",
    "                           random_vector_for_generation)\n",
    "    \n",
    "def runOneEpoch(batch, noise_dim, gen_opt, critic_opt, images, \n",
    "                getEpoch, increment, ranEpoch, epoch_proportion=1):\n",
    "    start = time.time()\n",
    "    for num in range(math.ceil(epoch_proportion*TOTAL_NUM/BATCH_SIZE)):\n",
    "        if(num % (CRITIC_UPDATES_PER_GEN_UPDATE+1) == 0):\n",
    "            sess.run(gen_opt) #, feed_dict={images: sess.run(batch)})\n",
    "        else:\n",
    "            sess.run(critic_opt) #, feed_dict={images: sess.run(batch)})\n",
    "        gc.collect()\n",
    "        print(\"Finished {} out of {}\".format(num*BATCH_SIZE+BATCH_SIZE, \n",
    "                                             math.ceil(epoch_proportion*TOTAL_NUM)), end='\\r')\n",
    "    clear_output(wait=True)\n",
    "    sess.run(ranEpoch, feed_dict={increment: epoch_proportion})\n",
    "    print(\"Finished epoch {:.2f}\".format(sess.run(getEpoch)))\n",
    "    generate_images(sess.run(getEpoch))\n",
    "    # saving (checkpoint) the model every 15 epochs\n",
    "    #if (epoch + 1) % 15 == 0:\n",
    "        #checkpoint.save(file_prefix = checkpoint_prefix)\n",
    "\n",
    "    print('Time taken {} sec'.format(time.time()-start))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "def testAudio(batch, prefix):\n",
    "    specs = sess.run(batch)\n",
    "    for i in range(specs.shape[0]):\n",
    "        spec = specs[i]\n",
    "        mag = spec[:, :, 0]\n",
    "        angles = spec[:, :, 1]\n",
    "        mag = ((mag+1)/2)*48-32\n",
    "        angles = angles*math.pi\n",
    "        ft =(np.exp(mag)-1.2664166e-14)*np.exp(1j*angles)\n",
    "        newaudio = librosa.istft(ft, 512, 2048).astype(np.int16)\n",
    "        #print('Generated audio')\n",
    "        #print('Interval of audio: [{}, {}]'.format(np.amin(newaudio), np.amax(newaudio)))\n",
    "        wavfile.write(\"audio/{}-{}.wav\".format(prefix, i), 16000, newaudio)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Running the model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "_kg_hide-output": true,
    "_uuid": "446c1e4d2462906cc5ed888104e549ac86b476b2",
    "colab": {},
    "colab_type": "code",
    "id": "Ly3UN0SLLY2l",
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "generator, gen_opt, critic_opt, images, generated, ranEpoch, getEpoch, increment = buildgraph()\n",
    "sess.run(tf.global_variables_initializer())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Checkpoint already exists. Want to overwrite? (y/n): n\n"
     ]
    }
   ],
   "source": [
    "saver = tf.train.Saver(var_list=tf.trainable_variables())\n",
    "if(not(os.path.isdir(\"checkpoints\"))):\n",
    "#if(True):\n",
    "    saver.save(sess, \"checkpoints/model\")\n",
    "    print(\"Saved\")\n",
    "else:\n",
    "    while True:\n",
    "        ans = input(\"Checkpoint already exists. Want to overwrite? (y/n): \")\n",
    "        if(ans == \"y\"):\n",
    "            saver.save(sess, \"checkpoints/model\")\n",
    "            break\n",
    "        elif(ans != \"n\"):\n",
    "            print(\"Invalid response, please type \\\"y\\\" or \\\"n\\\"\")\n",
    "        else:\n",
    "            break\n",
    "sess.graph.finalize()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Restoring parameters from checkpoints/model\n",
