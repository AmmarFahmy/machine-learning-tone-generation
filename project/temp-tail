      "Error caught, restarting from checkpoint\n",
      "INFO:tensorflow:Restoring parameters from checkpoints/model\n",
      "Error caught, restarting from checkpoint\n",
      "INFO:tensorflow:Restoring parameters from checkpoints/model\n",
      "Error caught, restarting from checkpoint\n",
      "INFO:tensorflow:Restoring parameters from checkpoints/model\n",
      "Error caught, restarting from checkpoint\n",
      "INFO:tensorflow:Restoring parameters from checkpoints/model\n",
      "Error caught, restarting from checkpoint\n",
      "INFO:tensorflow:Restoring parameters from checkpoints/model\n",
      "Error caught, restarting from checkpoint\n",
      "INFO:tensorflow:Restoring parameters from checkpoints/model\n",
      "Error caught, restarting from checkpoint\n",
      "INFO:tensorflow:Restoring parameters from checkpoints/model\n",
      "Error caught, restarting from checkpoint\n",
      "INFO:tensorflow:Restoring parameters from checkpoints/model\n",
      "Error caught, restarting from checkpoint\n",
      "INFO:tensorflow:Restoring parameters from checkpoints/model\n",
      "Error caught, restarting from checkpoint\n",
      "INFO:tensorflow:Restoring parameters from checkpoints/model\n",
      "Error caught, restarting from checkpoint\n",
      "INFO:tensorflow:Restoring parameters from checkpoints/model\n",
      "Error caught, restarting from checkpoint\n",
      "INFO:tensorflow:Restoring parameters from checkpoints/model\n",
      "Error caught, restarting from checkpoint\n",
      "INFO:tensorflow:Restoring parameters from checkpoints/model\n",
      "Error caught, restarting from checkpoint\n",
      "INFO:tensorflow:Restoring parameters from checkpoints/model\n",
      "Error caught, restarting from checkpoint\n",
      "INFO:tensorflow:Restoring parameters from checkpoints/model\n",
      "Error caught, restarting from checkpoint\n",
      "INFO:tensorflow:Restoring parameters from checkpoints/model\n",
      "Error caught, restarting from checkpoint\n",
      "INFO:tensorflow:Restoring parameters from checkpoints/model\n",
      "Error caught, restarting from checkpoint\n",
      "INFO:tensorflow:Restoring parameters from checkpoints/model\n",
      "Error caught, restarting from checkpoint\n",
      "INFO:tensorflow:Restoring parameters from checkpoints/model\n",
      "Error caught, restarting from checkpoint\n",
      "INFO:tensorflow:Restoring parameters from checkpoints/model\n",
      "Error caught, restarting from checkpoint\n",
      "INFO:tensorflow:Restoring parameters from checkpoints/model\n",
      "Error caught, restarting from checkpoint\n",
      "INFO:tensorflow:Restoring parameters from checkpoints/model\n",
      "Error caught, restarting from checkpoint\n",
      "INFO:tensorflow:Restoring parameters from checkpoints/model\n",
      "Error caught, restarting from checkpoint\n",
      "INFO:tensorflow:Restoring parameters from checkpoints/model\n",
      "Error caught, restarting from checkpoint\n",
      "INFO:tensorflow:Restoring parameters from checkpoints/model\n",
      "Error caught, restarting from checkpoint\n",
      "INFO:tensorflow:Restoring parameters from checkpoints/model\n",
      "Error caught, restarting from checkpoint\n"
     ]
    }
   ],
   "source": [
    "# Can exit any time because model saves after every epoch\n",
    "try:\n",
    "    saver.restore(sess, \"checkpoints/model\")\n",
    "except: \n",
    "    while True:\n",
    "        ans = input(\"Saved checkpoint invalid, save new checkpoint? (y/n): \")\n",
    "        if(ans == \"y\"):\n",
    "            saver.save(sess, \"checkpoints/model\")\n",
    "            break\n",
    "        elif(ans != \"n\"):\n",
    "            print(\"Invalid response, please type \\\"y\\\" or \\\"n\\\"\")\n",
    "        else:\n",
    "            raise Exception('Checkpoint invalid')\n",
    "\n",
    "# Waits for another program to remove the .lock file before continuing execution\n",
    "# Comment out next line to disable lock\n",
    "!touch .lock\n",
    "while(subprocess.check_output('test -f .lock ; echo $?', shell=True).decode('utf-8')[0]=='0'):\n",
    "    time.sleep(5)\n",
    "print('Unlocked', end='\\r')\n",
    "\n",
    "while True:\n",
    "    try:\n",
    "        runOneEpoch(batch, noise_dim, gen_opt, critic_opt, images, getEpoch, \n",
    "                    increment, ranEpoch, 0.05)\n",
    "        saver.save(sess, \"checkpoints/model\")\n",
    "    except:\n",
    "        print(\"Error caught, restarting from checkpoint\")\n",
    "        saver.restore(sess, \"checkpoints/model\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "generate_images(source='real', save=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(sess.run(images).shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "testAudio(images, \"real\")\n",
    "testAudio(generated, \"fake\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "while(kernel is dead):\n",
    "    plant_a_new_seed()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "accelerator": "GPU",
  "colab": {
   "collapsed_sections": [],
   "name": "dcgan.ipynb",
   "private_outputs": true,
   "provenance": [
    {
     "file_id": "1eb0NOTQapkYs3X0v-zL1x5_LFKgDISnp",
     "timestamp": 1527173385672
    }
   ],
   "toc_visible": true,
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
